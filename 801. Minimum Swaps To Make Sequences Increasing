class Solution {
public:

int n;
int inf=100009;

vector<vector<int>>dp;

int call(vector<int>& nums1, vector<int>& nums2,int i,bool swapped){
     
     if(i==n) return 0;
     if(dp[i][swapped]!=-1) return dp[i][swapped];

     int prev1=nums1[i-1];
     int prev2=nums2[i-1];

     if(swapped){
         swap(prev1,prev2);
     }
     int ans=inf;

     if(nums1[i]>prev1 and nums2[i]>prev2){
         ans=call(nums1,nums2,i+1,0);
     }

     if(nums1[i]>prev2 and nums2[i]>prev1){
         ans=min(ans,1+call(nums1,nums2,i+1,1));
     }

     return dp[i][swapped]=ans;
}


    int minSwap(vector<int>& nums1, vector<int>& nums2) {

      
        nums1.insert(nums1.begin(),-1);
        nums2.insert(nums2.begin(),-1);

        n=nums1.size();

        dp.resize(n+1,vector<int>(2,-1));

        return call(nums1,nums2,1,0);  
    }
};
