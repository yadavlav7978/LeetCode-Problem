class Solution {
public:

int subarray_sum(vector<int>&num,int target){

    map<int,int>mp;
    int sum=0;
    int ct=0;
    mp[0]=1;

    for(int i=0;i<num.size();++i){
        sum+=num[i];
        int key=sum-target;
        if(mp.find(key)!=mp.end()){
            ct+=mp[key];
        }
        mp[sum]++;
    }

    return ct;
}

int numSubmatrixSumTarget(vector<vector<int>>& mat, int target) {

    int row=mat.size();
    int col=mat[0].size();

    vector<vector<int>>sum(row,vector<int>(col));

    for(int j=0;j<col;j++){
           int sm=0;
        for(int i=0;i<row;i++){
           sm+=mat[i][j];
           sum[i][j]=sm;
        }
    }

 int ans=0;

    for(int i=0;i<row;i++){

        int l=-1;

        for(int j=i;j<row;j++){
           
           vector<int>temp(col);

            for(int k=0;k<col;k++){
                temp[k]=sum[j][k];

                if(l>=0){
                    temp[k]-=sum[l][k];
                }
            }
           l++;
            ans+=subarray_sum(temp,target);
        }
    }

    return ans;
        
    }
};
