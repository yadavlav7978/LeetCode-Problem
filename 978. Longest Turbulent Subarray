class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        
        int n=arr.size();

        if(n==1) return 1;
        if(n==2){
            if(arr[0]==arr[1]) return 1;
            return 2;
        }

        bool allequal=true;
        int val=arr[0];

        for(int i=0;i<n;i++){
            if(arr[i]!=val){
                allequal=false;
                break;
            }
        }

        if(allequal) return 1;

        int dp[n];
        for(int i=00;i<n;i++){
            dp[i]=0;
        }

        for(int i=1;i<n-1;i++){
            if(arr[i]>arr[i-1] and arr[i]>arr[i+1]){
                dp[i]=1;
            }
             else if(arr[i]<arr[i-1] and arr[i]<arr[i+1]){
                dp[i]=1;
            }
        }
        
        int ans=0;
        int ct=0;

        for(int i=0;i<n;i++){
            if(dp[i]==1){
                ct++;
            }else{
                ans=max(ans,ct);
                ct=0;
            }
        }

        if(ans==0) return 2;

        return ans+2;   
    }
};
