class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& Prob, int start, int end) {

        vector<vector<pair<int,double>>>adj(n);

        for(int i=0;i<edges.size();i++){
            int a=edges[i][0];
            int b=edges[i][1];
            double prob=Prob[i];

            adj[a].push_back({b,prob});
            adj[b].push_back({a,prob});
        }

        priority_queue< pair<double,int> >pq;
        pq.push({1,start});

        vector<double>dist(n,0);
        dist[start]=1;

        while(!pq.empty()){

            double prob=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            if(node==end) return prob;

            for(auto [adjNode,cost]:adj[node]){

                if(dist[adjNode]<(prob*cost)){
                    dist[adjNode]=prob*cost;
                    pq.push({dist[adjNode],adjNode});
                }
            }
        }


        return dist[end];
        
    }
};
